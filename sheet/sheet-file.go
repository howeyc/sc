package sheet

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"

	"github.com/howeyc/sc/sheet/align"
)

// Load a sheet.
func (s *Sheet) Load() {
	if file, err := os.Open(s.Filename); err == nil {
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := scanner.Text()
			if strings.HasPrefix(line, "#") || len(line) < 1 {
				continue
			}
			words := strings.Split(line, " ")
			cmd := ""
			adrs := Address("")
			val := ""
			if len(words) >= 2 {
				cmd = words[0]
				adrs = Address(words[1])
			}
			if len(words) >= 4 {
				val = strings.Join(words[3:], " ")
			}
			if len(val) > 1 && val[0] == '"' {
				val = val[1 : len(val)-1]
			}
			switch cmd {
			case "leftstring":
				s.SetCell(adrs, NewCell(val, align.AlignLeft, true))
			case "rightstrng":
				s.SetCell(adrs, NewCell(val, align.AlignRight, true))
			case "label":
				s.SetCell(adrs, NewCell(val, align.AlignCenter, true))
			case "let":
				s.SetCell(adrs, NewCell(val, align.AlignRight, false))
			case "goto":
				s.SelectedCell = adrs
			case "format":
				width, _ := strconv.ParseInt(words[2], 10, 64)
				precision, _ := strconv.ParseInt(words[3], 10, 64)
				ctype, _ := strconv.ParseInt(words[4], 10, 64)
				s.columnFormats[string(adrs)] = ColumnFormat{width: int(width), precision: int(precision), ctype: int(ctype)}
			}
		}
	}
}

// Write a cell as a line to a writer.
func (c *Cell) write(w io.Writer, address string) {
	if c.stringType && c.alignment == align.AlignLeft {
		fmt.Fprintf(w, "leftstring %s = \"%s\"\n", address, c.value)
	} else if c.stringType && c.alignment == align.AlignCenter {
		fmt.Fprintf(w, "label %s = \"%s\"\n", address, c.value)
	} else if c.stringType {
		fmt.Fprintf(w, "rightstring %s = \"%s\"\n", address, c.value)
	} else {
		fmt.Fprintf(w, "let %s = %s\n", address, c.value)
	}
}

// Writes the formats for all the defined columns in the sheet.
func (s *Sheet) writeFormats(w io.Writer) {
	for k, cFormat := range s.columnFormats {
		fmt.Fprintf(w, "format %s %d %d %d\n", k, cFormat.width, cFormat.precision, cFormat.ctype)
	}
}

// Save a sheet.
func (s *Sheet) Save() error {
	if outfile, err := os.Create(s.Filename); err == nil {
		fmt.Fprintln(outfile, "# This data file was generated by Spreadsheet Calculator.")
		fmt.Fprintln(outfile, "# You almost certainly shouldn't edit it.")
		fmt.Fprintln(outfile, "")

		s.writeFormats(outfile)

		for addr, cell := range s.data {
			cell.write(outfile, string(addr))
		}
		fmt.Fprintf(outfile, "goto %s A0", s.SelectedCell)
		outfile.Close()
		return nil
	} else {
		return err
	}
}
